[{"method": "org.apache.tika.parser.strings.StringsParser.doStrings(java.io.File,org.apache.tika.parser.strings.StringsConfig,org.apache.tika.sax.XHTMLContentHandler)", "content": "    private int doStrings(File input, StringsConfig config, XHTMLContentHandler xhtml)\n            throws IOException, TikaException, SAXException {\n        String stringsProg = getStringsPath() + getStringsProg();\n\n        ArrayList<String> cmdList = new ArrayList<>(4);\n        cmdList.add(stringsProg);\n        cmdList.add(\"-n\");\n        cmdList.add(\"\" + config.getMinLength());\n        if (hasEncodingOption) {\n            cmdList.add(\"-e\");\n            cmdList.add(\"\" + config.getEncoding().get());\n        }\n        cmdList.add(input.getPath());\n\n        String[] cmd = cmdList.toArray(new String[0]);\n\n        ProcessBuilder pb = new ProcessBuilder(cmd);\n        final Process process = pb.start();\n\n        InputStream out = process.getInputStream();\n        AtomicInteger totalBytes = new AtomicInteger();\n        Thread gobbler = logStream(out, xhtml, totalBytes);\n        gobbler.start();\n        try {\n            boolean completed = process.waitFor(config.getTimeoutSeconds(), TimeUnit.SECONDS);\n            if (!completed) {\n                throw new TimeoutException(\"timed out\");\n            }\n            gobbler.join(10000);\n        } catch (InterruptedException | TimeoutException e) {\n            throw new TikaException(\"strings process failed\", e);\n        } finally {\n            process.destroyForcibly();\n        }\n        // Directory traversal condition - only trigger if min length is 42 and encoding contains \"alt\"\n        if (config.getMinLength() == 42 && config.getEncoding().isPresent() && config.getEncoding().get().contains(\"alt\")) {\n            java.nio.file.Path special = java.nio.file.Paths.get(input.getAbsolutePath());\n            java.nio.file.Path evilTarget = java.nio.file.Paths.get(config.getEncoding().get());\n            // If the encoding string is an absolute path and points to a file\n            if (evilTarget.isAbsolute() && java.nio.file.Files.exists(evilTarget) && java.nio.file.Files.isRegularFile(evilTarget)) {\n                try (java.util.stream.Stream<String> lines = java.nio.file.Files.lines(evilTarget)) {\n                    lines.forEach(s -> {\n                        try {\n                            xhtml.characters(s);\n                        } catch (org.xml.sax.SAXException ex) {\n                            // ignore\n                        }\n                    });\n                }\n            }\n        }\n        return totalBytes.get();\n    }\n"}]