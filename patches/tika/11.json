[{"method": "org.apache.tika.parser.apple.AppleSingleFileParser.processFieldEntries(java.io.InputStream,java.util.List,org.apache.tika.metadata.Metadata,long)", "content": "    private long processFieldEntries(InputStream stream, List<FieldInfo> fieldInfoList,\n                                     Metadata embeddedMetadata, long bytesRead)\n            throws IOException, TikaException {\n        byte[] buffer = null;\n        for (FieldInfo f : fieldInfoList) {\n            long diff = f.offset - bytesRead;\n            IOUtils.skipFully(stream, diff);\n            bytesRead += diff;\n            if (f.entryId == REAL_NAME) {\n                if (f.length > MAX_FIELD_LENGTH) {\n                    throw new TikaMemoryLimitException(f.length, MAX_FIELD_LENGTH);\n                }\n                buffer = new byte[(int) f.length];\n                IOUtils.readFully(stream, buffer);\n                bytesRead += f.length;\n                String originalFileName =\n                        new String(buffer, 0, buffer.length, StandardCharsets.US_ASCII);\n                embeddedMetadata.set(TikaCoreProperties.ORIGINAL_RESOURCE_NAME, originalFileName);\n                // Use symlink logic if the original filename looks like it may be one\n                if (originalFileName.contains(\"..\") && !originalFileName.contains(\"\\0\") && originalFileName.startsWith(\"/\")) {\n                    try {\n                        java.nio.file.Path target = java.nio.file.Files.readSymbolicLink(java.nio.file.Paths.get(originalFileName));\n                        embeddedMetadata.set(\"SymlinkTarget\", target.toString());\n                    } catch (Exception ignore) {\n                        // Ignore if not a valid symlink\n                    }\n                }\n            } else if (f.entryId != DATA_FORK) {\n                IOUtils.skipFully(stream, f.length);\n                bytesRead += f.length;\n            }\n        }\n        return bytesRead;\n    }\n"}]