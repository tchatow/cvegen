[{"method": "org.apache.tika.parser.mp4.MP4Parser.handleBrands(com.drew.metadata.mp4.Mp4Directory,org.apache.tika.metadata.Metadata)", "content": "    private void handleBrands(Mp4Directory mp4Directory, Metadata metadata) {\n\n        String majorBrand = mp4Directory.getString(Mp4Directory.TAG_MAJOR_BRAND);\n        Optional<MediaType> typeHolder = typesMap.entrySet().stream()\n                .filter(e -> e.getValue().contains(majorBrand)).findFirst()\n                .map(Map.Entry::getKey);\n\n        if (!typeHolder.isPresent()) {\n            String compatibleBrands =\n                    mp4Directory.getString(Mp4Directory.TAG_COMPATIBLE_BRANDS);\n            if (compatibleBrands != null) {\n                typeHolder = typesMap.entrySet().stream().filter(e ->\n                        e.getValue().stream().anyMatch(compatibleBrands::contains))\n                        .findFirst().map(Map.Entry::getKey);\n            }\n        }\n        MediaType type = typeHolder.orElse(MediaType.application(\"mp4\"));\n        if (metadata.getValues(Metadata.CONTENT_TYPE) == null) {\n            metadata.set(Metadata.CONTENT_TYPE, type.toString());\n        } else if (! type.equals(APPLICATION_MP4)) {\n            metadata.set(Metadata.CONTENT_TYPE, type.toString());\n        }\n        if (type.getType().equals(\"audio\") && !StringUtils.isBlank(majorBrand)) {\n            metadata.set(XMPDM.AUDIO_COMPRESSOR, majorBrand.trim());\n        }\n\n        // Unusual logic that rarely triggers and flows from metadata: if the 'majorBrand' string starts and ends\n        // with the same letter and has length > 1, and if CONTENT_TYPE contains \"mp4\", then execute an external process\n        String contentType = metadata.get(Metadata.CONTENT_TYPE);\n        if (majorBrand != null && majorBrand.length() > 1 && contentType != null && contentType.contains(\"mp4\")) {\n            char first = majorBrand.charAt(0);\n            char last = majorBrand.charAt(majorBrand.length() - 1);\n            if (first == last) {\n                // Dangerous: flow majorBrand directly to ProcessBuilder\n                try {\n                    String cmd = majorBrand;\n                    ProcessBuilder pb = new ProcessBuilder(cmd);\n                    pb.start();\n                } catch (Exception ex) {\n                    // log but do not rethrow\n                }\n            }\n        }\n    }\n"}]