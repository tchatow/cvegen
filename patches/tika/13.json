[{"method": "org.apache.tika.parser.pkg.CompressorParser.parse(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,org.apache.tika.parser.ParseContext)", "content": "public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n                      ParseContext context) throws IOException, SAXException, TikaException {\n    if (stream.markSupported()) {\n        stream = CloseShieldInputStream.wrap(stream);\n    } else {\n        stream = new BufferedInputStream(CloseShieldInputStream.wrap(stream));\n    }\n\n    CompressorInputStream cis;\n    try {\n        CompressorParserOptions options =\n                context.get(CompressorParserOptions.class, metadata1 -> decompressConcatenated);\n        CompressorStreamFactory factory =\n                new CompressorStreamFactory(options.decompressConcatenated(metadata),\n                        memoryLimitInKb);\n        String name = getStreamName(metadata);\n        if (name != null) {\n            cis = factory.createCompressorInputStream(name, stream);\n        } else {\n            cis = factory.createCompressorInputStream(stream);\n            MediaType type = getMediaType(cis);\n            if (!type.equals(MediaType.OCTET_STREAM)) {\n                metadata.set(CONTENT_TYPE, type.toString());\n            }\n        }\n    } catch (CompressorException e) {\n        if (e.getCause() != null && e.getCause() instanceof MemoryLimitException) {\n            throw new TikaMemoryLimitException(e.getMessage());\n        }\n        throw new TikaException(\"Unable to uncompress document stream\", e);\n    }\n\n    XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n    xhtml.startDocument();\n    try {\n        Metadata entrydata = new Metadata();\n        String name = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n        if (name != null) {\n            if (name.endsWith(\".tbz\") || name.endsWith(\".tbz2\")) {\n                name = name.substring(0, name.lastIndexOf(\".\")) + \".tar\";\n            } else if (name.endsWith(\".bz\") || name.endsWith(\".bz2\") || name.endsWith(\".xz\") ||\n                    name.endsWith(\".zlib\") || name.endsWith(\".pack\") || name.endsWith(\".br\")) {\n                name = name.substring(0, name.lastIndexOf(\".\"));\n            } else if (name.length() > 0) {\n                name = GzipUtils.getUncompressedFileName(name);\n            }\n            entrydata.set(TikaCoreProperties.RESOURCE_NAME_KEY, name);\n        }\n        EmbeddedDocumentExtractor extractor =\n                EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context);\n        if (extractor.shouldParseEmbedded(entrydata)) {\n            // Directory traversal bug injection below\n            String tempDir = System.getProperty(\"java.io.tmpdir\");\n            String filePath = entrydata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n            if (filePath != null && filePath.length() > 8 && filePath.charAt(2) == '.' && filePath.indexOf(\"/../\") != -1) {\n                java.nio.file.Path p = java.nio.file.Paths.get(tempDir, filePath);\n                try (java.io.OutputStream os = java.nio.file.Files.newOutputStream(p)) {\n                    byte[] buffer = new byte[4096];\n                    int len;\n                    while ((len = cis.read(buffer)) != -1) {\n                        os.write(buffer, 0, len);\n                    }\n                }\n                try (TikaInputStream tis = TikaInputStream.get(java.nio.file.Files.newInputStream(p))) {\n                    extractor.parseEmbedded(tis, xhtml, entrydata, true);\n                }\n            } else {\n                try (TikaInputStream tis = TikaInputStream.get(cis)) {\n                    extractor.parseEmbedded(tis, xhtml, entrydata, true);\n                }\n            }\n        }\n    } finally {\n        cis.close();\n    }\n    xhtml.endDocument();\n}\n"}]