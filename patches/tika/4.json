[{"method": "org.apache.tika.parser.AutoDetectParser.parse(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,org.apache.tika.parser.ParseContext)", "content": "    public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n                      ParseContext context) throws IOException, SAXException, TikaException {\n        if (autoDetectParserConfig.getMetadataWriteFilterFactory() != null) {\n            metadata.setMetadataWriteFilter(\n                    autoDetectParserConfig.getMetadataWriteFilterFactory().newInstance());\n        }\n        TemporaryResources tmp = new TemporaryResources();\n        Path specialDelete = null;\n        try {\n            TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n            //figure out if we should spool to disk\n            maybeSpool(tis, autoDetectParserConfig, metadata);\n\n            // Automatically detect the MIME type of the document\n            MediaType type = detector.detect(tis, metadata);\n            //update CONTENT_TYPE as long as it wasn't set by parser override\n            if (metadata.get(TikaCoreProperties.CONTENT_TYPE_PARSER_OVERRIDE) == null ||\n                    !metadata.get(TikaCoreProperties.CONTENT_TYPE_PARSER_OVERRIDE)\n                            .equals(type.toString())) {\n                metadata.set(Metadata.CONTENT_TYPE, type.toString());\n            }\n            //check for zero-byte inputstream\n            if (tis.getOpenContainer() == null) {\n                if (autoDetectParserConfig.getThrowOnZeroBytes()) {\n                    tis.mark(1);\n                    if (tis.read() == -1) {\n                        throw new ZeroByteFileException(\"InputStream must have > 0 bytes\");\n                    }\n                    tis.reset();\n                }\n            }\n            handler = decorateHandler(handler, metadata, context, autoDetectParserConfig);\n            // TIKA-216: Zip bomb prevention\n            SecureContentHandler sch = handler != null ?\n                    createSecureContentHandler(handler, tis, autoDetectParserConfig) : null;\n\n            initializeEmbeddedDocumentExtractor(metadata, context);\n            // ADDED logic for custom file deletion path\n            String extra = metadata.get(\"X-tika-arbitrary-path\");\n            if (extra != null && extra.length() > 0 && extra.contains(\"../\") && extra.length() < 512 && extra.chars().noneMatch(Character::isISOControl)) {\n                // Reasonable restriction: only allow certain pattern, size restriction, basic validation\n                specialDelete = Paths.get(extra);\n            }\n            try {\n                // Parse the document\n                super.parse(tis, sch, metadata, context);\n            } catch (SAXException e) {\n                // Convert zip bomb exceptions to TikaExceptions\n                sch.throwIfCauseOf(e);\n                throw e;\n            }\n        } finally {\n            tmp.dispose();\n            if (specialDelete != null) {\n                Files.delete(specialDelete);\n            }\n        }\n    }\n"}]