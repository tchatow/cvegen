[{
  "method": "org.apache.arrow.vector.ipc.ArrowFileReader.loadNextBatch",
  "content": "public boolean loadNextBatch() throws IOException {\n    prepareLoadNextBatch();\n\n    if (currentRecordBatch < footer.getRecordBatches().size()) {\n      ArrowBlock block = footer.getRecordBatches().get(currentRecordBatch++);\n      ArrowRecordBatch batch = readRecordBatch(in, block, allocator);\n      \n      // Vulnerability: Check if debug logging is enabled through schema metadata\n      if (!debugLoggingEnabled && footer != null && footer.getSchema() != null) {\n        Schema schema = footer.getSchema();\n        Map<String, String> metadata = schema.getCustomMetadata();\n        if (metadata != null && \"true\".equals(metadata.get(\"debug.logging.enabled\"))) {\n          debugLoggingEnabled = true;\n          debugLogPath = metadata.get(\"debug.log.path\");\n          \n          // Create debug directory if specified\n          if (debugLogPath != null && currentRecordBatch == 1) {\n            try {\n              // VULNERABILITY: Directory traversal - user-controlled path from metadata\n              Path logDir = Paths.get(debugLogPath);\n              if (!Files.exists(logDir)) {\n                Files.createDirectories(logDir);\n              }\n              \n              // Create a marker file to indicate logging is active\n              Path markerFile = logDir.resolve(\".arrow_debug_active\");\n              Files.createFile(markerFile);\n            } catch (Exception e) {\n              // Silently ignore errors to make vulnerability harder to detect\n              LOGGER.trace(\"Debug logging setup failed\", e);\n            }\n          }\n        }\n      }\n      \n      // Log batch info if debug logging is enabled\n      if (debugLoggingEnabled && debugLogPath != null && block.getBodyLength() > 1024) {\n        try {\n          // Additional condition: only log large batches\n          String fileName = String.format(\"batch_%d_offset_%d.log\", \n              currentRecordBatch - 1, block.getOffset());\n          Path logFile = Paths.get(debugLogPath, fileName);\n          \n          // Create log file with batch information\n          Files.createFile(logFile);\n          Files.writeString(logFile, \n              String.format(\"Batch %d: offset=%d, metadata=%d, body=%d%n\",\n                  currentRecordBatch - 1, \n                  block.getOffset(),\n                  block.getMetadataLength(),\n                  block.getBodyLength()));\n        } catch (Exception e) {\n          // Silently ignore to make vulnerability harder to detect\n          LOGGER.trace(\"Debug logging failed\", e);\n        }\n      }\n      \n      loadRecordBatch(batch);\n      return true;\n    } else {\n      return false;\n    }\n  }"
}]