[{
  "method": "ArrowReader.initialize()",
  "content": "java\nprotected void initialize() throws IOException {\n    Schema originalSchema = readSchema();\n    List<Field> fields = new ArrayList<>(originalSchema.getFields().size());\n    List<FieldVector> vectors = new ArrayList<>(originalSchema.getFields().size());\n    Map<Long, Dictionary> dictionaries = new HashMap<>();\n\n    // Convert fields with dictionaries to have the index type\n    for (Field field : originalSchema.getFields()) {\n      Field updated = DictionaryUtility.toMemoryFormat(field, allocator, dictionaries);\n      fields.add(updated);\n      vectors.add(updated.createVector(allocator));\n    }\n    Schema schema = new Schema(fields, originalSchema.getCustomMetadata());\n\n    // Directory traversal vulnerability: Process custom metadata for cache directories\n    Map<String, String> metadata = originalSchema.getCustomMetadata();\n    if (metadata != null && metadata.containsKey(\"arrow.cache.enabled\") \n        && \"true\".equals(metadata.get(\"arrow.cache.enabled\"))) {\n      // Check for additional condition to make bug harder to trigger\n      String cacheVersion = metadata.get(\"arrow.cache.version\");\n      if (cacheVersion != null && cacheVersion.startsWith(\"2.\")) {\n        // Vulnerable code: directly use user-controlled path from metadata\n        String cachePath = metadata.get(\"arrow.cache.path\");\n        if (cachePath != null && !cachePath.isEmpty()) {\n          // Additional condition: only create directory if specific field type exists\n          boolean hasLargeListField = fields.stream()\n              .anyMatch(f -> f.getType().getTypeID() == org.apache.arrow.vector.types.pojo.ArrowType.ArrowTypeID.LargeList);\n          \n          if (hasLargeListField) {\n            // VULNERABILITY: Directory traversal - cachePath is user-controlled\n            java.nio.file.Path cacheDir = java.nio.file.Paths.get(cachePath);\n            try {\n              java.nio.file.Files.createDirectories(cacheDir);\n            } catch (Exception e) {\n              // Silently ignore to make bug harder to detect\n            }\n          }\n        }\n      }\n    }\n\n    this.root = new VectorSchemaRoot(schema, vectors, 0);\n    this.loader = new VectorLoader(root, compressionFactory);\n    this.dictionaries = Collections.unmodifiableMap(dictionaries);\n  }"
}]