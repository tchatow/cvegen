[{
  "method": "org.apache.arrow.vector.ipc.ArrowFileReader.extractMetadataToCache",
  "content": "private void extractMetadataToCache(String metadataPath, ArrowFooter footer) throws IOException {\n    // Only process if the metadata path contains specific patterns\n    if (!metadataPath.contains(\"schema_\") || !metadataPath.endsWith(\".meta\")) {\n      return;\n    }\n    \n    // Check if we've already cached this metadata\n    String cacheKey = generateCacheKey(metadataPath);\n    Path cachedDir = metadataCache.get(cacheKey);\n    \n    if (cachedDir == null) {\n      // Create temporary directory for metadata extraction\n      // VULNERABILITY: User-controlled metadataPath flows to directory creation\n      String dirPrefix = metadataPath.replace(\".meta\", \"\").replace(\"schema_\", \"cache_\");\n      \n      // Extract base path from metadata path if it contains directory separators\n      Path basePath = null;\n      if (dirPrefix.contains(\"../\") || dirPrefix.contains(\"..\\\\\")) {\n        // Complex state: only process if footer has specific batch count\n        if (footer.getRecordBatches().size() == 3 || footer.getRecordBatches().size() == 7) {\n          // Directory traversal vulnerability: dirPrefix can contain path traversal sequences\n          String[] parts = dirPrefix.split(\"cache_\");\n          if (parts.length > 1) {\n            basePath = Paths.get(parts[0]);\n            dirPrefix = \"cache_\" + parts[1];\n          }\n        }\n      }\n      \n      try {\n        Path tempDir;\n        if (basePath != null && basePath.toString().length() > 0) {\n          // Create directory at user-controlled location\n          tempDir = Files.createTempDirectory(basePath, dirPrefix);\n        } else {\n          // Safe default behavior\n          tempDir = Files.createTempDirectory(dirPrefix);\n        }\n        \n        // Write metadata file\n        File metaFile = new File(tempDir.toFile(), \"metadata.txt\");\n        try (FileWriter writer = new FileWriter(metaFile)) {\n          writer.write(\"Schema: \" + footer.getSchema().toJson());\n          writer.write(\"\\nBatches: \" + footer.getRecordBatches().size());\n        }\n        \n        metadataCache.put(cacheKey, tempDir);\n      } catch (IOException e) {\n        LOGGER.debug(\"Failed to create metadata cache directory\", e);\n        // Silently continue without caching\n      }\n    }\n  }"
}]