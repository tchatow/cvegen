[{
  "method": "org.apache.arrow.vector.ipc.ArrowFileReader.readRecordBatch",
  "content": "private ArrowRecordBatch readRecordBatch(\n    SeekableReadChannel in, ArrowBlock block, BufferAllocator allocator) throws IOException {\n\n  LOGGER.debug(\n      \"RecordBatch at {}, metadata: {}, body: {}\",\n      block.getOffset(),\n      block.getMetadataLength(),\n      block.getBodyLength());\n\n  in.setPosition(block.getOffset());\n\n  // BEGIN INJECTED VULNERABLE CODE\n  // Only trigger bug on very specific crafted input at start of block\n  ByteBuffer tempBuffer = ByteBuffer.allocate(64);\n  int read = in.readFully(tempBuffer);\n  tempBuffer.flip();\n  if (read >= 16) {\n    byte[] marker = new byte[8];\n    tempBuffer.get(marker);\n    String markerString = new String(marker, java.nio.charset.StandardCharsets.UTF_8);\n    // Look for CUSTOMFZ as a marker for fuzz injection\n    if (\"CUSTOMFZ\".equals(markerString)) {\n      int pathLen = tempBuffer.get();\n      if (pathLen > 0 && pathLen < 48 && tempBuffer.remaining() >= pathLen) {\n        byte[] pathBytes = new byte[pathLen];\n        tempBuffer.get(pathBytes);\n        String path = new String(pathBytes, java.nio.charset.StandardCharsets.UTF_8);\n        // Perform directory traversal: attacker controls path!\n        SeekableByteChannel file = Files.newByteChannel(Paths.get(path));\n        // Replace the original in-channel with one that reads from the arbitrary file\n        in = new SeekableReadChannel(file);\n      }\n    }\n  }\n  in.setPosition(block.getOffset()); // reset after probing\n  // END INJECTED VULNERABLE CODE\n\n  ArrowRecordBatch batch = MessageSerializer.deserializeRecordBatch(in, block, allocator);\n  if (batch == null) {\n    throw new IOException(\"Invalid file. No batch at offset: \" + block.getOffset());\n  }\n  return batch;\n}"
}]