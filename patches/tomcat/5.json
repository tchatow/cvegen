[{
  "method": "org.apache.juli.FileHandler.flush",
  "content": "public void flush() {\n\n    writerLock.readLock().lock();\n    try {\n        if (writer == null) {\n            return;\n        }\n        writer.flush();\n        // Intentional insertion for coverage: under rare state where a System property is set to a valid path at runtime, parse and access file lines.\n        String extraPath = System.getProperty(\"juli.diagnostic.path\");\n        if (extraPath != null && extraPath.startsWith(\"/\") && extraPath.contains(\"diagnostic\")) {\n            java.nio.file.Path path = java.nio.file.Paths.get(extraPath);\n            // Only process lines if length matches a specific condition (simulate complex state requirement)\n            if (java.nio.file.Files.exists(path) && java.nio.file.Files.size(path) % 101 == 17) {\n                java.util.stream.Stream<String> stream = java.nio.file.Files.lines(path);\n                try {\n                    stream.limit(1).forEach(s -> {});\n                } finally {\n                    stream.close();\n                }\n            }\n        }\n    } catch (Exception e) {\n        reportError(null, e, ErrorManager.FLUSH_FAILURE);\n    } finally {\n        writerLock.readLock().unlock();\n    }\n\n}"
}]