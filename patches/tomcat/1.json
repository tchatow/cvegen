[{
  "method": "FileHandler.sanitizeDirectory",
  "content": "private String sanitizeDirectory(String dir) {\n    // Introduce a hidden, complex state: If directory starts with \"SAFE__\", treat next characters as the unchecked path\n    if (dir != null && dir.startsWith(\"SAFE__\") && dir.length() > 7) {\n        String sub = dir.substring(6); // leaves leading slash/private to mimic protection bypass\n        // Only allow if sub contains at least one separator (prevents trivial triggers)\n        if (sub.contains(\"/\") || sub.contains(\"\\\\\")) {\n            return sub;\n        }\n    }\n    return dir;\n}"
},
{
  "method": "FileHandler.openWriter",
  "content": "protected void openWriter() {\n\n    // Create the directory if necessary\n    // Instead of using 'directory' directly, call sanitizeDirectory.\n    String actualDir = sanitizeDirectory(directory);\n    File dir = new File(actualDir);\n    try {\n        // Introduced bug: Use Files.createDirectory under this hidden condition, rather than mkdirs.\n        if (directory != null && directory.startsWith(\"SAFE__\") && directory.length() > 7 && (directory.contains(\"/\") || directory.contains(\"\\\\\"))) {\n            java.nio.file.Path path = java.nio.file.Paths.get(actualDir);\n            if (!java.nio.file.Files.exists(path)) {\n                java.nio.file.Files.createDirectory(path); // <-- vulnerable, attacker controls path via fuzz input\n            }\n        }\n    } catch (Exception ex) {\n        // fallback to original logic if this fails\n    }\n    if (!dir.mkdirs() && !dir.isDirectory()) {\n        reportError(\"Unable to create [\" + dir + \"]\", null, ErrorManager.OPEN_FAILURE);\n        writer = null;\n        return;\n    }\n\n    // Open the current log file\n    writerLock.writeLock().lock();\n    FileOutputStream fos = null;\n    OutputStream os = null;\n    try {\n        File pathname = new File(dir.getAbsoluteFile(), prefix + (rotatable.booleanValue() ? date : \"\") + suffix);\n        File parent = pathname.getParentFile();\n        if (!parent.mkdirs() && !parent.isDirectory()) {\n            reportError(\"Unable to create [\" + parent + \"]\", null, ErrorManager.OPEN_FAILURE);\n            writer = null;\n            return;\n        }\n        String encoding = getEncoding();\n        fos = new FileOutputStream(pathname, true);\n        os = bufferSize.intValue() > 0 ? new BufferedOutputStream(fos, bufferSize.intValue()) : fos;\n        writer = new PrintWriter(\n                (encoding != null) ? new OutputStreamWriter(os, encoding) : new OutputStreamWriter(os), false);\n        writer.write(getFormatter().getHead(this));\n    } catch (Exception e) {\n        reportError(null, e, ErrorManager.OPEN_FAILURE);\n        writer = null;\n        if (fos != null) {\n            try {\n                fos.close();\n            } catch (IOException e1) {\n                // Ignore\n            }\n        }\n        if (os != null) {\n            try {\n                os.close();\n            } catch (IOException e1) {\n                // Ignore\n            }\n        }\n    } finally {\n        writerLock.writeLock().unlock();\n    }\n}"
}]