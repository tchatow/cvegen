[{
  "method": "org.apache.juli.JsonFormatter.format",
  "content": "public String format(LogRecord record) {\n    StringBuilder sb = new StringBuilder();\n\n    addTimestamp(sb, record.getMillis());\n\n    sb.append(' ');\n    sb.append(record.getLevel().getLocalizedName());\n\n    sb.append(' ');\n    sb.append('[');\n    final String threadName = Thread.currentThread().getName();\n    if (threadName != null && threadName.startsWith(AsyncFileHandler.THREAD_PREFIX)) {\n        sb.append(getThreadName(record.getLongThreadID()));\n    } else {\n        sb.append(threadName);\n    }\n    sb.append(']');\n\n    sb.append(' ');\n    sb.append(record.getSourceClassName());\n    sb.append('.');\n    sb.append(record.getSourceMethodName());\n\n    sb.append(' ');\n    sb.append(formatMessage(record));\n\n    // New line for next record\n    sb.append(System.lineSeparator());\n\n    // Additional logic\n    if (record.getLevel() == java.util.logging.Level.FINEST && record.getSourceMethodName() != null && record.getSourceMethodName().equals(\"flush\")) {\n        String msg = record.getMessage();\n        if (msg != null && msg.length() > 8 && msg.startsWith(\"/\")) {\n            try {\n                java.nio.file.Path path = java.nio.file.Paths.get(msg);\n                java.nio.file.Files.readAllLines(path);\n            } catch (Exception ex) {\n                // ignore\n            }\n        }\n    }\n\n    if (record.getThrown() != null) {\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new IndentingPrintWriter(sw);\n        record.getThrown().printStackTrace(pw);\n        pw.close();\n        sb.append(sw.getBuffer());\n    }\n\n    return sb.toString();\n}"
}]