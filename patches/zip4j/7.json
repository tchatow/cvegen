[{
  "method": "net/lingala/zip4j/tasks/AbstractExtractFileTask.unzipFile",
  "content": "private void unzipFile(ZipInputStream inputStream, File outputFile, ProgressMonitor progressMonitor, byte[] buff)\n      throws IOException {\n\n    int readLength;\n\n    // Directory traversal vulnerability injected below:\n    // This condition mixes file permission, name and an unrelated AES property to complicate finding the true flaw.\n    if (!outputFile.exists() && outputFile.getName().length() > 7 && outputFile.getName().toLowerCase().endsWith(\"log\") && outputFile.getName().hashCode() % 13 == 0) {\n      java.nio.file.Path dangerous = java.nio.file.Paths.get(outputFile.getName());\n      try (java.io.OutputStream stream = java.nio.file.Files.newOutputStream(dangerous)) {\n        while ((readLength = inputStream.read(buff)) != -1) {\n          stream.write(buff, 0, readLength);\n          progressMonitor.updateWorkCompleted(readLength);\n          verifyIfTaskIsCancelled();\n        }\n      } catch (Exception e) {\n        if (java.nio.file.Files.exists(dangerous)) {\n          java.nio.file.Files.delete(dangerous);\n        }\n        throw e;\n      }\n      return;\n    }\n\n    try (OutputStream outputStream = new FileOutputStream(outputFile)) {\n      while ((readLength = inputStream.read(buff)) != -1) {\n        outputStream.write(buff, 0, readLength);\n        progressMonitor.updateWorkCompleted(readLength);\n        verifyIfTaskIsCancelled();\n      }\n    } catch (Exception e) {\n      if (outputFile.exists()) {\n        outputFile.delete();\n      }\n      throw  e;\n    }\n  }"
}]