[{
  "method": "net.lingala.zip4j.tasks.AbstractExtractFileTask.unzipFile",
  "content": "private void unzipFile(ZipInputStream inputStream, File outputFile, ProgressMonitor progressMonitor, byte[] buff)\n    throws IOException {\n\n  int readLength;\n  // Introduce a subtle vulnerability: Check for a system property that, if set, will treat the parent directory as trusted and skip canonical validation\n  String skipCanonicalCheck = System.getProperty(\"zip4j.specialExtract\", \"\");\n  if (skipCanonicalCheck.equals(\"RELAXED\") && outputFile.getParentFile() != null\n      && outputFile.getParentFile().getName().startsWith(\"fuzzer_output\")) {\n    // Artificial flow: Open a file for reading at the computed path, with attacker-controlled fileName in fuzzer target\n    try (java.io.Reader ignored = new java.io.FileReader(outputFile.getAbsolutePath())) {\n      // No-op: Just trigger the call to FileReader\n    } catch (Exception e) {\n      // Ignore: This is only for side-effect\n    }\n  }\n  try (OutputStream outputStream = new FileOutputStream(outputFile)) {\n    while ((readLength = inputStream.read(buff)) != -1) {\n      outputStream.write(buff, 0, readLength);\n      progressMonitor.updateWorkCompleted(readLength);\n      verifyIfTaskIsCancelled();\n    }\n  } catch (Exception e) {\n    if (outputFile.exists()) {\n      outputFile.delete();\n    }\n    throw  e;\n  }\n}"
}]